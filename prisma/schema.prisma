generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model categorycmsomission {
  cmsoMissionType     String        @id @default("5-4-1") @db.VarChar(10)
  cmsoMissionTypeName String?       @default("เป็นพื้นที่ให้นักศึกษามีอิสระในการจัดโปรเจคตามที่ตนเองต้องการ") @db.Text
  projectdata         projectdata[]
}

model categorycmsoproject {
  cmsoProjectType     String        @id @default("5-1-1") @db.VarChar(10)
  cmsoProjectTypeName String?       @default("ประเภทโครงงานกิจกรรมสัมมนาองค์กร") @db.Text
  projectdata         projectdata[]
}

model categorycmumedgrad {
  cmuMedGradType     String        @id @default("5-3-1") @db.VarChar(10)
  cmuMedGradTypeName String?       @default("มีคุณธรรม จริยธรรม ปฏิบัติตนตามจรรยาบรรณแห่งวิชาชีพ") @db.Text
  projectdata        projectdata[]
}

model categorycmumedorg {
  cmuMedOrgType     String        @id @default("5-5-1") @db.VarChar(10)
  cmuMedOrgTypeName String?       @default("Customer focus มุ่งเน้นผู้รับบริการ") @db.Text
  projectdata       projectdata[]
}

model categorycmuproject {
  cmuProjectType     String        @id @default("5-2-1") @db.VarChar(10)
  cmuProjectTypeName String?       @default("โครงงานด้านอาหารและสุขภาพ") @db.Text
  projectdata        projectdata[]
}

model organizations {
  orgID               String                @id @default("") @db.VarChar(15)
  orgName             String                @db.Text
  orgType             organizations_orgType @default(DIVISION)
  parentOrg           String?               @db.VarChar(15)
  organizations       organizations?        @relation("organizationsToorganizations", fields: [parentOrg], references: [orgID], onDelete: NoAction, onUpdate: NoAction, map: "FK_organizations_organizations")
  other_organizations organizations[]       @relation("organizationsToorganizations")
  projects            projects[]
  useraffiliation     useraffiliation[]

  @@index([parentOrg], map: "parentOrg")
}

model projectconsiderationstatus {
  projectID                String                                              @id @default("") @db.VarChar(50)
  statusVP                 projectconsiderationstatus_statusVP                 @default(QUEUE)
  statusFinance            projectconsiderationstatus_statusFinance            @default(QUEUE)
  statusSec                projectconsiderationstatus_statusSec                @default(QUEUE)
  statusPresent            projectconsiderationstatus_statusPresent            @default(QUEUE)
  updatedDTM               DateTime                                            @default(now())
  projectConsiderationType projectconsiderationstatus_projectConsiderationType @default(NORMAL)
  dateApprovalDoc          DateTime?
  dateOtherDoc             DateTime?
  dateActionPlan           DateTime?
  dateReceipt              DateTime?
  dateFinalize             DateTime?
  projectType              projectconsiderationstatus_projectType              @default(OLD)
  comment                  String                                              @default("") @db.MediumText
  projects                 projects                                            @relation(fields: [projectID], references: [projectID], onDelete: Cascade, map: "FK_projectconsiderationstatus_projects")

  @@index([projectID], map: "projectID")
}

model projectcostexpandedlist {
  projectID         String                           @id @default("") @db.VarChar(50)
  costType          projectcostexpandedlist_costType @default(MEDINCOME)
  costOtherTypeText String?                          @db.Text
  costDescription   String?                          @db.Text
  costAmount        String?                          @db.Text
  costEach          String?                          @db.Text
  costTotal         String?                          @db.Text
  projectdata       projectdata                      @relation(fields: [projectID], references: [projectID], onDelete: NoAction, onUpdate: NoAction, map: "FK_projectcostexpandedlist_projectdata")

  @@index([projectID], map: "projectID")
}

model projectdata {
  projectID                        String                   @id @db.VarChar(50)
  placeInCMU                       String                   @default("") @db.MediumText
  placeOutsideCMU                  String?                  @default("") @db.MediumText
  datePrepareStart                 DateTime?                @default(now()) @db.Date
  datePrepareEnd                   DateTime?                @default(now()) @db.Date
  dateEventStart                   DateTime?                @default(now()) @db.Date
  dateEventEnd                     DateTime?                @default(now()) @db.Date
  dateSummationStart               DateTime?                @default(now()) @db.Date
  dateSummationEnd                 DateTime?                @default(now()) @db.Date
  professorFullName                String?                  @default("") @db.VarChar(100)
  professorAffiliation             String?                  @default("") @db.VarChar(100)
  otherOrgName                     String?                  @default("") @db.MediumText
  cmsoProjectType                  String?                  @db.VarChar(10)
  cmuProjectType                   String?                  @db.VarChar(10)
  cmuMedGradType                   String?                  @db.VarChar(10)
  cmsoMissionType                  String?                  @db.VarChar(10)
  cmuMedOrgType                    String?                  @db.VarChar(10)
  background                       String?                  @default("") @db.VarChar(3000)
  aims                             String?                  @default("") @db.MediumText
  numberStudentParticipant         Int?                     @default(0)
  numberFacultyStaffParticipant    Int?                     @default(0)
  numberProfessorParticipant       Int?                     @default(0)
  numberOutsideParticipant         Int?                     @default(0)
  numberStudentStaff               Int?                     @default(0)
  goalQualitative                  String?                  @default("") @db.MediumText
  indicatorParticipantQuantitative String?                  @default("") @db.MediumText
  indicatorSatisfactory            String?                  @default("") @db.MediumText
  indicatorAims                    String?                  @default("") @db.MediumText
  outcome                          String?                  @default("") @db.MediumText
  createdDateTime                  DateTime?                @default(now())
  projectcostexpandedlist          projectcostexpandedlist?
  categorycmsomission              categorycmsomission?     @relation(fields: [cmsoMissionType], references: [cmsoMissionType], map: "FK_projectdata_categorycmsomission")
  categorycmsoproject              categorycmsoproject?     @relation(fields: [cmsoProjectType], references: [cmsoProjectType], map: "FK_projectdata_categorycmsoproject")
  categorycmumedgrad               categorycmumedgrad?      @relation(fields: [cmuMedGradType], references: [cmuMedGradType], map: "FK_projectdata_categorycmumedgrad")
  categorycmumedorg                categorycmumedorg?       @relation(fields: [cmuMedOrgType], references: [cmuMedOrgType], map: "FK_projectdata_categorycmumedorg")
  categorycmuproject               categorycmuproject?      @relation(fields: [cmuProjectType], references: [cmuProjectType], map: "FK_projectdata_categorycmuproject")
  projects                         projects                 @relation(fields: [projectID], references: [projectID], onDelete: Cascade, map: "FK_projectdata_projects")
  projectdoactlists                projectdoactlists?
  projectdochecklists              projectdochecklists?
  projectdodolists                 projectdodolists?
  projectdoplanlists               projectdoplanlists?

  @@index([cmsoMissionType], map: "cmsoMissionType")
  @@index([cmsoProjectType], map: "cmsoProjectType")
  @@index([cmuMedGradType], map: "cmuMedGradType")
  @@index([cmuMedOrgType], map: "cmuMedOrgType")
  @@index([cmuProjectType], map: "cmuProjectType")
  @@index([projectID], map: "projectID")
}

model projectdoactlists {
  projectID                String      @id @default("") @db.VarChar(50)
  doActDescriptionText     String?     @db.Text
  doActDateText            String?     @db.Text
  doActResponsibleFullName String?     @db.Text
  projectdata              projectdata @relation(fields: [projectID], references: [projectID], onDelete: Cascade, map: "FK_projectdoactlists_projectdata")

  @@index([projectID], map: "projectID")
}

model projectdochecklists {
  projectID                  String      @id @default("") @db.VarChar(50)
  doCheckDescriptionText     String?     @db.Text
  doCheckDateText            String?     @db.Text
  doCheckResponsibleFullName String?     @db.Text
  projectdata                projectdata @relation(fields: [projectID], references: [projectID], onDelete: Cascade, map: "FK_projectdochecklists_projectdata")

  @@index([projectID], map: "projectID")
}

model projectdodolists {
  projectID               String      @id @default("") @db.VarChar(50)
  doDoDescriptionText     String?     @db.Text
  doDoDateText            String?     @db.Text
  doDoResponsibleFullName String?     @db.Text
  projectdata             projectdata @relation(fields: [projectID], references: [projectID], onDelete: Cascade, map: "FK_projectdodolists_projectdata")

  @@index([projectID], map: "projectID")
}

model projectdoplanlists {
  projectID                 String      @id @default("") @db.VarChar(50)
  doPlanDescriptionText     String?     @db.Text
  doPlanDateText            String?     @db.Text
  doPlanResponsibleFullName String?     @db.Text
  projectdata               projectdata @relation(fields: [projectID], references: [projectID], onDelete: Cascade, map: "FK_projectplanlists_projectdata")

  @@index([projectID], map: "projectID")
}

model projectparticipantrecruit {
  participantRecruitID String                @id @unique(map: "participantRecruitID") @db.VarChar(50)
  projectID            String                @db.VarChar(50)
  registerFrom         DateTime              @db.DateTime(0)
  registerUntil        DateTime              @db.DateTime(0)
  maxNumber            Int                   @default(0)
  createdDateTime      DateTime              @default(now())
  updatedDateTime      DateTime              @default(now())
  isAllowed            Int                   @default(0)
  yearAllowed          String                @default("1,2,3,4,5,6")
  projects             projects              @relation(fields: [projectID], references: [projectID], onDelete: Cascade, map: "projects-participantrtecruit-projectID")
  projectparticipants  projectparticipants[]

  @@index([projectID], map: "projectID")
}

model projectparticipants {
  participantApplicationID  String                    @id @unique(map: "participantApplicationID") @db.VarChar(50)
  recruitID                 String                    @db.VarChar(50)
  studentID                 String                    @db.VarChar(10)
  createdDateTime           DateTime?                 @default(now())
  projectparticipantrecruit projectparticipantrecruit @relation(fields: [recruitID], references: [participantRecruitID], onDelete: Cascade, map: "participantRecruit-participants-recruitID")
  users                     users                     @relation(fields: [studentID], references: [studentID], onDelete: Cascade, map: "users-projectparticipants-studentID")

  @@index([recruitID], map: "recruitID")
  @@index([studentID], map: "studentID")
}

model projects {
  projectID                  String                      @id @unique(map: "projects_project_id_key") @db.VarChar(50)
  studentID                  String?                     @db.VarChar(10)
  orgID                      String                      @db.VarChar(50)
  projectNameTH              String?                     @db.Text
  projectNickNameTH          String?                     @db.VarChar(500)
  projectShortDescriptionTH  String?                     @db.Text
  projectNameEN              String?                     @db.Text
  projectNickNameEN          String?                     @db.VarChar(500)
  projectFullDetail          String?                     @db.MediumText
  eventDateStart             DateTime?
  eventDateFinish            DateTime?
  createdDateTime            DateTime?                   @default(now())
  updatedDateTime            DateTime?                   @default(now())
  isShown                    Int                         @default(0)
  academicYear               Int                         @default(202401)
  projectconsiderationstatus projectconsiderationstatus?
  projectdata                projectdata?
  projectparticipantrecruit  projectparticipantrecruit[]
  organizations              organizations               @relation(fields: [orgID], references: [orgID], onDelete: Cascade, map: "organizations-projects-orgID")
  users                      users?                      @relation(fields: [studentID], references: [studentID], map: "users-projects-studentID")
  projectstaffrecruit        projectstaffrecruit[]

  @@index([orgID], map: "orgID")
  @@index([studentID], map: "student_id")
}

model projectstaffrecruit {
  staffRecruitID              String                        @id @unique(map: "staffRecruitID") @db.VarChar(50)
  projectID                   String                        @db.VarChar(50)
  registerFrom                DateTime                      @db.DateTime(0)
  registerUntil               DateTime                      @db.DateTime(0)
  createdDateTime             DateTime                      @default(now()) @db.DateTime(0)
  updatedDateTime             DateTime                      @default(now()) @db.DateTime(0)
  isAllowed                   Int                           @default(0)
  yearAllowed                 String                        @default("1,2,3,4,5,6")
  projects                    projects                      @relation(fields: [projectID], references: [projectID], onDelete: Cascade, map: "projects-staffrecruit-projectID")
  projectstaffrecruitposition projectstaffrecruitposition[]
  projectstaffs               projectstaffs[]

  @@index([projectID], map: "projectID")
}

model projectstaffrecruitposition {
  staffPositionID     String               @id @unique(map: "staffPositionID") @db.VarChar(50)
  recruitID           String?              @db.VarChar(50)
  positionName        String               @default("ตำแหน่งหน้าที่") @db.VarChar(100)
  maxNumber           Int                  @default(1)
  registerFrom        DateTime             @db.DateTime(0)
  registerUntil       DateTime             @db.DateTime(0)
  createdDateTime     DateTime             @default(now()) @db.DateTime(0)
  updatedDateTime     DateTime             @default(now()) @db.DateTime(0)
  isAllowed           Int                  @default(0)
  projectstaffrecruit projectstaffrecruit? @relation(fields: [recruitID], references: [staffRecruitID], map: "projecttaffrecruit-staffposition-recruitID")
  projectstaffs       projectstaffs[]

  @@index([recruitID], map: "recruitID")
}

model projectstaffs {
  staffApplicationID          String                      @id @unique(map: "staffApplicationID") @db.VarChar(50)
  recruitID                   String                      @default("") @db.VarChar(50)
  positionID                  String                      @db.VarChar(50)
  studentID                   String                      @default("") @db.VarChar(10)
  createdDateTime             DateTime                    @default(now())
  projectstaffrecruit         projectstaffrecruit         @relation(fields: [recruitID], references: [staffRecruitID], onDelete: NoAction, onUpdate: NoAction, map: "projectstaffrecruit-staff-recruitID")
  projectstaffrecruitposition projectstaffrecruitposition @relation(fields: [positionID], references: [staffPositionID], onDelete: NoAction, onUpdate: NoAction, map: "projectstaffrecruitposition-staff-positionID")
  users                       users                       @relation(fields: [studentID], references: [studentID], onDelete: NoAction, onUpdate: NoAction, map: "users-staff-studentID")

  @@index([positionID], map: "projectstaffrecruitposition-staff-positionID")
  @@index([recruitID, positionID], map: "recruit-positionID")
  @@index([studentID], map: "studentID")
}

model useraffiliation {
  studentID       String                          @default("") @db.VarChar(10)
  affiliatedOrg   String                          @db.VarChar(50)
  affiliationID   Int
  affiliationType useraffiliation_affiliationType @default(MEMBER)
  createdDateTime DateTime?                       @default(now())
  organizations   organizations                   @relation(fields: [affiliatedOrg], references: [orgID], onDelete: Cascade, map: "organizations-useraffiliation-affiliatedOrg")
  users           users                           @relation(fields: [studentID], references: [studentID], onDelete: Cascade, map: "users-userafiliation-studentID")

  @@id([affiliatedOrg, affiliationID])
  @@index([affiliatedOrg], map: "affiliatedOrg")
  @@index([studentID], map: "studentID")
}

model usercodeverification {
  studentID       String    @id @db.VarChar(15)
  code            String?   @db.VarChar(10)
  referenceID     String?   @db.VarChar(10)
  createdDateTime DateTime? @default(now()) @db.DateTime(0)
  usercredentials users     @relation(fields: [studentID], references: [studentID], onDelete: Cascade, onUpdate: NoAction, map: "usercredentials-usercodeverification-studentID")

  @@index([studentID], map: "studentID")
}

model usercredentials {
  uuid            String               @unique(map: "uuid") @db.VarChar(50)
  studentID       String               @id @db.VarChar(10)
  email           String?              @db.VarChar(100)
  hashPassword    String?              @db.VarChar(500)
  createdDateTime DateTime?            @default(now())
  updatedDateTime DateTime?            @default(now())
  role            usercredentials_role @default(USER)
  emailVerified   Int                  @default(0)
  users           users                @relation(fields: [studentID], references: [studentID], onDelete: Cascade, map: "FK_usercredentials_users")
  userslogout     userslogout[]
}

model users {
  studentID            String                @id @default("") @db.VarChar(10)
  titleTH              String?               @db.Text
  firstNameTH          String?               @db.Text
  lastNameTH           String?               @db.Text
  nickNameTH           String?               @db.Text
  titleEN              String?               @db.Text
  firstNameEN          String?               @db.Text
  lastNameEN           String?               @db.Text
  currentYear          Int?
  admissionCategory    String?               @db.VarChar(5)
  phoneNumber          String?               @db.VarChar(11)
  lineID               String?               @db.VarChar(100)
  facebook             String?               @db.VarChar(100)
  instagram            String?               @db.VarChar(100)
  medicalCondition     String?               @db.Text
  allergy              String?               @db.Text
  specialNeed          String?               @db.Text
  createdDateTime      DateTime?             @default(now()) @db.DateTime(0)
  updatedDateTime      DateTime?             @default(now()) @db.DateTime(0)
  projectparticipants  projectparticipants[]
  projects             projects[]
  projectstaffs        projectstaffs[]
  useraffiliation      useraffiliation[]
  usercodeverification usercodeverification?
  usercredentials      usercredentials?

  @@index([studentID], map: "studentID")
}

model userslogout {
  killedTokenAutoID Int             @unique(map: "killedTokenAutoID") @default(autoincrement())
  uuid              String
  token             String?         @db.VarChar(10000)
  killedDateTime    DateTime?       @default(now()) @db.DateTime(0)
  usercredentials   usercredentials @relation(fields: [uuid], references: [uuid], onDelete: Cascade, onUpdate: NoAction, map: "usercredentials-userlogout-uuid")

  @@index([uuid], map: "uuid")
}

enum projectconsiderationstatus_statusVP {
  QUEUE
  APPROVED
  REJECTED
}

enum projectcostexpandedlist_costType {
  MEDINCOME
  EXTRACIRR
  SPORTS
  OTHER
}

enum organizations_orgType {
  ROOT
  CLUB
  DIVISION
  OTHER
}

enum projectconsiderationstatus_statusFinance {
  QUEUE
  APPROVED
  REJECTED
}

enum projectconsiderationstatus_statusSec {
  QUEUE
  APPROVED
  REJECTED
}

enum useraffiliation_affiliationType {
  PRESIDENT
  VICE_PRESIDENT
  SECRETARY
  MEMBER
}

enum projectconsiderationstatus_statusPresent {
  QUEUE
  REJECTED
  PASS_IN_PRINCIPLE
  PASS
}

enum projectconsiderationstatus_projectConsiderationType {
  EARLY_BIRD
  NORMAL
}

enum usercredentials_role {
  ADMIN
  PRES
  VP
  STAFF
  USER
}

enum projectconsiderationstatus_projectType {
  OLD
  NEW
}
