generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch", "relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model categorycmsomission {
  cmsoMissionType     String        @id @default("5-4-1") @db.VarChar(10)
  cmsoMissionTypeName String?       @default("เป็นพื้นที่ให้นักศึกษามีอิสระในการจัดโปรเจคตามที่ตนเองต้องการ") @db.Text
  projectdata         projectdata[]
}

model categorycmsoproject {
  cmsoProjectType     String        @id @default("5-1-1") @db.VarChar(10)
  cmsoProjectTypeName String?       @default("ประเภทโครงงานกิจกรรมสัมมนาองค์กร") @db.Text
  projectdata         projectdata[]
}

model categorycmumedgrad {
  cmuMedGradType     String        @id @default("5-3-1") @db.VarChar(10)
  cmuMedGradTypeName String?       @default("มีคุณธรรม จริยธรรม ปฏิบัติตนตามจรรยาบรรณแห่งวิชาชีพ") @db.Text
  projectdata        projectdata[]
}

model categorycmumedorg {
  cmuMedOrgType     String        @id @default("5-5-1") @db.VarChar(10)
  cmuMedOrgTypeName String?       @default("Customer focus มุ่งเน้นผู้รับบริการ") @db.Text
  projectdata       projectdata[]
}

model categorycmuproject {
  cmuProjectType     String        @id @default("5-2-1") @db.VarChar(10)
  cmuProjectTypeName String?       @default("โครงงานด้านอาหารและสุขภาพ") @db.Text
  projectdata        projectdata[]
}

model organizations {
  orgID               String                @id @db.VarChar(15)
  orgName             String                @db.Text
  orgDesc             String?               @db.Text
  orgImageID          String?               @db.VarChar(50)
  orgType             organizations_orgType @default(DIVISION)
  parentOrg           String?               @db.VarChar(15)
  updatedDateTime     DateTime?             @default(now()) @db.DateTime(0)
  organizations       organizations?        @relation("organizationsToorganizations", fields: [parentOrg], references: [orgID], onDelete: NoAction, map: "FK_organizations_organizations")
  other_organizations organizations[]       @relation("organizationsToorganizations")
  projects            projects[]
  useraffiliation     useraffiliation[]

  @@index([parentOrg], map: "parentOrg")
}

model projectconsiderationstatus {
  projectID                String                                              @id @default("") @db.VarChar(50)
  statusVP                 projectconsiderationstatus_statusVP                 @default(QUEUE)
  statusFinance            projectconsiderationstatus_statusFinance            @default(QUEUE)
  statusSec                projectconsiderationstatus_statusSec                @default(QUEUE)
  statusPresent            projectconsiderationstatus_statusPresent            @default(QUEUE)
  updatedDatetime          DateTime                                            @default(now()) @db.DateTime(0)
  projectConsiderationType projectconsiderationstatus_projectConsiderationType @default(NORMAL)
  dateApprovalDoc          DateTime?                                           @db.Date
  dateOtherDoc             DateTime?                                           @db.Date
  dateActionPlan           DateTime?                                           @db.Date
  dateReceipt              DateTime?                                           @db.Date
  dateFinalize             DateTime?                                           @db.Date
  projectType              projectconsiderationstatus_projectType              @default(OLD)
  comment                  String?                                             @db.LongText
  projects                 projects                                            @relation(fields: [projectID], references: [projectID], onDelete: Cascade, map: "FK_projectconsiderationstatus_projects")

  @@index([projectID], map: "projectID")
}

model projectcostexpandedlist {
  projectID         String                           @id @default("") @db.VarChar(50)
  costType          projectcostexpandedlist_costType @default(MEDINCOME)
  costOtherTypeText String?                          @db.Text
  costDescription   String?                          @db.Text
  costAmount        String?                          @db.Text
  costEach          String?                          @db.Text
  costTotal         String?                          @db.Text
  projectdata       projectdata                      @relation(fields: [projectID], references: [projectID], onDelete: NoAction, onUpdate: NoAction, map: "FK_projectcostexpandedlist_projectdata")

  @@index([projectID], map: "projectID")
}

model projectdata {
  projectID                        String                   @id @db.VarChar(50)
  placeInCMU                       String                   @default("") @db.MediumText
  placeOutsideCMU                  String?                  @default("") @db.MediumText
  datePrepareStart                 DateTime?                @default(now()) @db.Date
  datePrepareEnd                   DateTime?                @default(now()) @db.Date
  dateEventStart                   DateTime?                @default(now()) @db.Date
  dateEventEnd                     DateTime?                @default(now()) @db.Date
  dateSummationStart               DateTime?                @default(now()) @db.Date
  dateSummationEnd                 DateTime?                @default(now()) @db.Date
  professorFullName                String?                  @default("") @db.VarChar(150)
  professorAffiliation             String?                  @default("") @db.VarChar(150)
  otherOrgName                     String?                  @default("") @db.MediumText
  cmsoProjectType                  String?                  @db.VarChar(10)
  cmuProjectType                   String?                  @db.VarChar(10)
  cmuMedGradType                   String?                  @db.VarChar(10)
  cmsoMissionType                  String?                  @db.VarChar(10)
  cmuMedOrgType                    String?                  @db.VarChar(10)
  background                       String?                  @default("") @db.VarChar(3000)
  aims                             String?                  @default("") @db.MediumText
  numberStudentParticipant         Int?                     @default(0)
  numberFacultyStaffParticipant    Int?                     @default(0)
  numberProfessorParticipant       Int?                     @default(0)
  numberOutsideParticipant         Int?                     @default(0)
  numberStudentStaff               Int?                     @default(0)
  goalQualitative                  String?                  @default("") @db.MediumText
  indicatorParticipantQuantitative String?                  @default("") @db.MediumText
  indicatorSatisfactory            String?                  @default("") @db.MediumText
  indicatorAims                    String?                  @default("") @db.MediumText
  outcome                          String?                  @default("") @db.MediumText
  updatedDateTime                  DateTime?                @default(now()) @db.DateTime(0)
  projectcostexpandedlist          projectcostexpandedlist?
  categorycmsomission              categorycmsomission?     @relation(fields: [cmsoMissionType], references: [cmsoMissionType], map: "FK_projectdata_categorycmsomission")
  categorycmsoproject              categorycmsoproject?     @relation(fields: [cmsoProjectType], references: [cmsoProjectType], map: "FK_projectdata_categorycmsoproject")
  categorycmumedgrad               categorycmumedgrad?      @relation(fields: [cmuMedGradType], references: [cmuMedGradType], map: "FK_projectdata_categorycmumedgrad")
  categorycmumedorg                categorycmumedorg?       @relation(fields: [cmuMedOrgType], references: [cmuMedOrgType], map: "FK_projectdata_categorycmumedorg")
  categorycmuproject               categorycmuproject?      @relation(fields: [cmuProjectType], references: [cmuProjectType], map: "FK_projectdata_categorycmuproject")
  projects                         projects                 @relation(fields: [projectID], references: [projectID], onDelete: Cascade, map: "FK_projectdata_projects")
  projectdoactlists                projectdoactlists?
  projectdochecklists              projectdochecklists?
  projectdodolists                 projectdodolists?
  projectdoplanlists               projectdoplanlists?

  @@index([cmsoMissionType], map: "cmsoMissionType")
  @@index([cmsoProjectType], map: "cmsoProjectType")
  @@index([cmuMedGradType], map: "cmuMedGradType")
  @@index([cmuMedOrgType], map: "cmuMedOrgType")
  @@index([cmuProjectType], map: "cmuProjectType")
  @@index([projectID], map: "projectID")
}

model projectdoactlists {
  projectID                String      @id @default("") @db.VarChar(50)
  doActDescriptionText     String?     @db.Text
  doActDateText            String?     @db.Text
  doActResponsibleFullName String?     @db.Text
  projectdata              projectdata @relation(fields: [projectID], references: [projectID], onDelete: Cascade, map: "FK_projectdoactlists_projectdata")

  @@index([projectID], map: "projectID")
}

model projectdochecklists {
  projectID                  String      @id @default("") @db.VarChar(50)
  doCheckDescriptionText     String?     @db.Text
  doCheckDateText            String?     @db.Text
  doCheckResponsibleFullName String?     @db.Text
  projectdata                projectdata @relation(fields: [projectID], references: [projectID], onDelete: Cascade, map: "FK_projectdochecklists_projectdata")

  @@index([projectID], map: "projectID")
}

model projectdodolists {
  projectID               String      @id @default("") @db.VarChar(50)
  doDoDescriptionText     String?     @db.Text
  doDoDateText            String?     @db.Text
  doDoResponsibleFullName String?     @db.Text
  projectdata             projectdata @relation(fields: [projectID], references: [projectID], onDelete: Cascade, map: "FK_projectdodolists_projectdata")

  @@index([projectID], map: "projectID")
}

model projectdoplanlists {
  projectID                 String      @id @default("") @db.VarChar(50)
  doPlanDescriptionText     String?     @db.Text
  doPlanDateText            String?     @db.Text
  doPlanResponsibleFullName String?     @db.Text
  projectdata               projectdata @relation(fields: [projectID], references: [projectID], onDelete: Cascade, map: "FK_projectplanlists_projectdata")

  @@index([projectID], map: "projectID")
}

model projectparticipantrecruit {
  participantRecruitID String                @id @unique(map: "participantRecruitID") @db.VarChar(50)
  projectID            String                @db.VarChar(50)
  recruitName          String?               @default("New Recruitment") @db.VarChar(250)
  recruitDescription   String?               @db.Text
  registerFrom         DateTime              @default(now()) @db.DateTime(0)
  registerUntil        DateTime              @default(now()) @db.DateTime(0)
  maxNumber            Int                   @default(1)
  createdDateTime      DateTime              @default(now()) @db.DateTime(0)
  updatedDateTime      DateTime              @default(now()) @db.DateTime(0)
  isAllowed            Int                   @default(0)
  yearAllowed          String                @default("0,1,2,3,4,5,6,99")
  password             String?               @db.VarChar(50)
  projects             projects              @relation(fields: [projectID], references: [projectID], onDelete: Cascade, map: "projects-participantrtecruit-projectID")
  projectparticipants  projectparticipants[]

  @@index([projectID], map: "projectID")
}

model projectparticipants {
  participantApplicationID  String                    @id @unique(map: "participantApplicationID") @db.VarChar(50)
  recruitID                 String                    @db.VarChar(50)
  studentID                 String                    @db.VarChar(10)
  createdDateTime           DateTime?                 @default(now())
  projectparticipantrecruit projectparticipantrecruit @relation(fields: [recruitID], references: [participantRecruitID], onDelete: Cascade, map: "participantRecruit-participants-recruitID")
  users                     users                     @relation(fields: [studentID], references: [studentID], onDelete: Cascade, map: "users-projectparticipants-studentID")

  @@index([recruitID], map: "recruitID")
  @@index([studentID], map: "studentID")
}

model projects {
  projectID                   String                        @id @unique(map: "projects_project_id_key") @db.VarChar(50)
  studentID                   String?                       @db.VarChar(10)
  orgID                       String                        @db.VarChar(50)
  projectNameTH               String?                       @db.Text
  projectNickNameTH           String?                       @db.VarChar(500)
  projectShortDescriptionTH   String?                       @db.Text
  projectNameEN               String?                       @db.Text
  projectNickNameEN           String?                       @db.VarChar(500)
  projectFullDetail           String?                       @db.MediumText
  eventDateStart              DateTime?                     @default(dbgenerated("(curdate())")) @db.Date
  eventDateFinish             DateTime?                     @default(dbgenerated("(curdate())")) @db.Date
  createdDateTime             DateTime?                     @default(now()) @db.DateTime(0)
  updatedDateTime             DateTime?                     @default(now()) @db.DateTime(0)
  isShown                     Int                           @default(0)
  academicYear                String                        @default("202401") @db.VarChar(50)
  cmsoprojectannouncement     cmsoprojectannouncement[]
  projectcertificate          projectcertificate[]
  projectcertificatestatus    projectcertificatestatus?
  projectcheckincode          projectcheckincode?
  projectconsiderationstatus  projectconsiderationstatus?
  projectdata                 projectdata?
  projectevaluateformresponse projectevaluateformresponse[]
  projectevaluateformstatus   projectevaluateformstatus?
  projectparticipantrecruit   projectparticipantrecruit[]
  projectparticipation        projectparticipation[]
  organizations               organizations                 @relation(fields: [orgID], references: [orgID], onDelete: Cascade, map: "organizations-projects-orgID")
  users                       users?                        @relation(fields: [studentID], references: [studentID], map: "users-projects-studentID")
  projectstaffrecruit         projectstaffrecruit[]

  @@index([orgID], map: "orgID")
  @@index([studentID], map: "student_id")
  @@fulltext([projectNameTH], map: "projectNameTH")
  @@fulltext([projectNameEN], map: "projectNameEN")
  @@fulltext([projectNickNameEN], map: "projectNickNameEN")
  @@fulltext([projectNickNameTH], map: "projectNickNameTH")
}

model projectstaffrecruit {
  staffRecruitID              String                        @id @unique(map: "staffRecruitID") @db.VarChar(50)
  projectID                   String                        @db.VarChar(50)
  recruitName                 String?                       @default("New Recruitment") @db.VarChar(250)
  recruitDescription          String?                       @db.Text
  registerFrom                DateTime                      @default(now()) @db.DateTime(0)
  registerUntil               DateTime                      @default(now()) @db.DateTime(0)
  createdDateTime             DateTime                      @default(now()) @db.DateTime(0)
  updatedDateTime             DateTime                      @default(now()) @db.DateTime(0)
  isAllowed                   Int                           @default(0)
  yearAllowed                 String                        @default("0,1,2,3,4,5,6,99")
  password                    String?                       @db.VarChar(50)
  projects                    projects                      @relation(fields: [projectID], references: [projectID], onDelete: Cascade, map: "projects-staffrecruit-projectID")
  projectstaffrecruitposition projectstaffrecruitposition[]
  projectstaffs               projectstaffs[]

  @@index([projectID], map: "projectID")
}

model projectstaffrecruitposition {
  staffPositionID     String               @id @unique(map: "staffPositionID") @db.VarChar(50)
  recruitID           String?              @db.VarChar(50)
  positionName        String               @default("ตำแหน่งหน้าที่") @db.VarChar(100)
  maxNumber           Int                  @default(1)
  createdDateTime     DateTime             @default(now()) @db.DateTime(0)
  updatedDateTime     DateTime             @default(now()) @db.DateTime(0)
  isAllowed           Int                  @default(0)
  projectstaffrecruit projectstaffrecruit? @relation(fields: [recruitID], references: [staffRecruitID], onDelete: Cascade, map: "projecttaffrecruit-staffposition-recruitID")
  projectstaffs       projectstaffs[]

  @@index([recruitID], map: "recruitID")
}

model projectstaffs {
  staffApplicationID          String                      @id @unique(map: "staffApplicationID") @db.VarChar(50)
  recruitID                   String                      @default("") @db.VarChar(50)
  positionID                  String                      @db.VarChar(50)
  studentID                   String                      @default("") @db.VarChar(10)
  createdDateTime             DateTime                    @default(now())
  projectstaffrecruit         projectstaffrecruit         @relation(fields: [recruitID], references: [staffRecruitID], onDelete: Cascade, map: "projectstaffrecruit-staff-recruitID")
  projectstaffrecruitposition projectstaffrecruitposition @relation(fields: [positionID], references: [staffPositionID], onDelete: Cascade, map: "projectstaffrecruitposition-staff-positionID")
  users                       users                       @relation(fields: [studentID], references: [studentID], onDelete: Cascade, map: "users-staff-studentID")

  @@index([positionID], map: "projectstaffrecruitposition-staff-positionID")
  @@index([recruitID, positionID], map: "recruit-positionID")
  @@index([studentID], map: "studentID")
}

model useraffiliation {
  affiliationID   String                          @id @default("") @db.VarChar(50)
  affiliatedOrg   String                          @db.VarChar(50)
  studentID       String                          @default("") @db.VarChar(10)
  affiliationType useraffiliation_affiliationType @default(MEMBER)
  updatedDateTime DateTime?                       @default(now()) @db.DateTime(0)
  organizations   organizations                   @relation(fields: [affiliatedOrg], references: [orgID], onDelete: Cascade, map: "organizations-useraffiliation-affiliatedOrg")
  users           users                           @relation(fields: [studentID], references: [studentID], onDelete: Cascade, map: "users-userafiliation-studentID")

  @@index([affiliatedOrg], map: "affiliatedOrg")
  @@index([studentID], map: "studentID")
}

model usercodeverification {
  studentID       String    @id @db.VarChar(15)
  code            String?   @db.VarChar(10)
  referenceID     String?   @db.VarChar(10)
  createdDateTime DateTime? @default(now()) @db.DateTime(0)
  usercredentials users     @relation(fields: [studentID], references: [studentID], onDelete: Cascade, onUpdate: NoAction, map: "usercredentials-usercodeverification-studentID")

  @@index([studentID], map: "studentID")
}

model usercredentials {
  uuid            String               @unique(map: "uuid") @db.VarChar(50)
  studentID       String               @id @db.VarChar(10)
  email           String?              @db.VarChar(100)
  hashPassword    String?              @db.VarChar(500)
  createdDateTime DateTime?            @default(now())
  updatedDateTime DateTime?            @default(now())
  role            usercredentials_role @default(USER)
  emailVerified   Int                  @default(0)
  users           users                @relation(fields: [studentID], references: [studentID], onDelete: Cascade, map: "FK_usercredentials_users")
  userslogout     userslogout[]
}

model users {
  studentID               String                    @id @default("") @db.VarChar(10)
  titleTH                 String?                   @db.Text
  firstNameTH             String?                   @db.Text
  lastNameTH              String?                   @db.Text
  nickNameTH              String?                   @db.Text
  titleEN                 String?                   @db.Text
  firstNameEN             String?                   @db.Text
  lastNameEN              String?                   @db.Text
  currentYear             Int?
  admissionCategory       String?                   @db.VarChar(10)
  phoneNumber             String?                   @db.VarChar(11)
  lineID                  String?                   @db.VarChar(100)
  facebook                String?                   @db.VarChar(100)
  instagram               String?                   @db.VarChar(100)
  medicalCondition        String?                   @db.Text
  allergy                 String?                   @db.Text
  specialNeed             String?                   @db.Text
  createdDateTime         DateTime?                 @default(now()) @db.DateTime(0)
  updatedDateTime         DateTime?                 @default(now()) @db.DateTime(0)
  cmsoprojectannouncement cmsoprojectannouncement[]
  projectcertificate      projectcertificate[]
  projectparticipants     projectparticipants[]
  projectparticipation    projectparticipation[]
  projects                projects[]
  projectstaffs           projectstaffs[]
  uploadedfiledraft       uploadedfiledraft[]
  useraffiliation         useraffiliation[]
  usercodeverification    usercodeverification?
  usercredentials         usercredentials?

  @@index([studentID], map: "studentID")
}

model userslogout {
  autoID          Int             @id @default(autoincrement())
  studentID       String          @default("0") @db.VarChar(50)
  token           String          @default("0") @db.VarChar(1000)
  killedDateTime  DateTime?       @default(now()) @db.DateTime(0)
  usercredentials usercredentials @relation(fields: [studentID], references: [studentID], onDelete: Cascade, onUpdate: NoAction, map: "FK_userslogout_usercredentials")

  @@index([studentID], map: "studentID")
}

model cmsoprojectannouncement {
  announcementID      String    @id @db.VarChar(50)
  studentID           String    @db.VarChar(10)
  projectID           String?   @db.VarChar(50)
  announcementTitle   String?   @default("New Announcement") @db.VarChar(250)
  announcementBody    String?   @db.MediumText
  announcementCTALink String?   @db.MediumText
  updatedDateTime     DateTime  @default(now()) @db.DateTime(0)
  projects            projects? @relation(fields: [projectID], references: [projectID], onDelete: Cascade, map: "FK_cmsoprojectannouncement_projects")
  users               users     @relation(fields: [studentID], references: [studentID], onDelete: NoAction, map: "FK_cmsoprojectannouncement_users")

  @@index([projectID], map: "projectID")
  @@index([studentID], map: "studentID")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model uploadedfiledraft {
  fileID          String    @id @default("") @db.VarChar(50)
  studentID       String    @db.VarChar(10)
  path            String    @db.Text
  updatedDatetime DateTime? @db.DateTime(0)
  users           users     @relation(fields: [studentID], references: [studentID], onDelete: NoAction, map: "FK_uploadedfile_draft_users")

  @@index([studentID], map: "studentID")
}

model projectcertificate {
  certificateID   String                            @id @db.VarChar(50)
  certDesignType  projectcertificate_certDesignType @default(PCP_TH)
  studentID       String                            @db.VarChar(10)
  applicationID   String                            @db.VarChar(50)
  projectID       String                            @db.VarChar(50)
  createdDatetime DateTime?                         @default(now()) @db.DateTime(0)
  projects        projects                          @relation(fields: [projectID], references: [projectID], onDelete: Cascade, map: "FK_projectcertificate_projects")
  users           users                             @relation(fields: [studentID], references: [studentID], onDelete: Cascade, map: "FK_projectcertificate_users")

  @@index([projectID], map: "FK_projectcertificate_projects")
  @@index([studentID], map: "FK_projectcertificate_users")
}

model projectcertificatestatus {
  projectID                  String                                 @id @db.VarChar(50)
  certPCPStatus              projectcertificatestatus_certPCPStatus @default(DISABLED)
  certPCPCreatedDate         DateTime                               @default(now()) @db.DateTime(0)
  certSTFStatus              projectcertificatestatus_certSTFStatus @default(DISABLED)
  certSTFCreatedDate         DateTime                               @default(now()) @db.DateTime(0)
  teacherNameSignatureTH     String?                                @default("ชื่อ-สกุล อาจารย์") @db.Text
  teacherNameSignatureEN     String?                                @default("Full Name Teacher") @db.Text
  teacherPositionSignatureTH String?                                @default("ตำแหน่ง อาจารย์") @db.Text
  teacherPositionSignatureEN String?                                @default("Position Teacher") @db.Text
  teacherSignatureFileID     String?                                @db.VarChar(50)
  updatedDatetime            DateTime?                              @default(now()) @db.DateTime(0)
  projects                   projects                               @relation(fields: [projectID], references: [projectID], onDelete: NoAction, onUpdate: NoAction, map: "FK_projectcertificatestatus_projects")
}

model projectcheckincode {
  projectID       String    @id @db.VarChar(50)
  checkinCode     String    @unique(map: "checkinCode") @db.VarChar(6)
  updatedDatetime DateTime? @default(now()) @db.DateTime(0)
  projects        projects  @relation(fields: [projectID], references: [projectID], onDelete: Cascade, map: "FK_projectcheckincode_projects")
}

model projectevaluateformstatus {
  projectID       String                               @id @db.VarChar(50)
  formStatus      projectevaluateformstatus_formStatus @default(INACTIVE)
  maxNumberPCP    Int                                  @default(0)
  joinedNumberPCP Int                                  @default(0)
  maxNumberSTF    Int                                  @default(0)
  joinedNumberSTF Int                                  @default(0)
  updatedDatetime DateTime?                            @default(now()) @db.DateTime(0)
  projects        projects                             @relation(fields: [projectID], references: [projectID], onDelete: Cascade, map: "FK_projectevaluateformstatus_projects")
}

model projectparticipation {
  applicationID       String                                   @id @db.VarChar(50)
  studentID           String                                   @default("") @db.VarChar(10)
  projectID           String                                   @db.VarChar(50)
  participationStatus projectparticipation_participationStatus @default(ABSENT)
  updatedDatetime     DateTime?                                @default(now()) @db.DateTime(0)
  projects            projects                                 @relation(fields: [projectID], references: [projectID], onDelete: Cascade, map: "FK_projectparticipation_projects")
  users               users                                    @relation(fields: [studentID], references: [studentID], onDelete: Cascade, map: "FK_projectparticipation_users")

  @@index([projectID], map: "projectID")
  @@index([studentID], map: "studentID")
}

model projectevaluateformresponse {
  studentID                          String    @db.VarChar(10)
  projectID                          String    @db.VarChar(50)
  fundamentalLiteracy                Int       @default(0)
  fundamentalNumeracy                Int       @default(0)
  fundamentalScientific              Int       @default(0)
  fundamentalFinancial               Int       @default(0)
  fundamentalICT                     Int       @default(0)
  fundamentalCulturalCivic           Int       @default(0)
  competencyCriticalThinkProblemSolv Int       @default(0)
  competencyCreativity               Int       @default(0)
  competencyCommunication            Int       @default(0)
  competencyCollaboration            Int       @default(0)
  characterCuriosity                 Int       @default(0)
  characterInitiative                Int       @default(0)
  characterPersistenceGrit           Int       @default(0)
  characterAdaptability              Int       @default(0)
  characterLeadership                Int       @default(0)
  characterSocialCulturalAwareness   Int       @default(0)
  shouldContinue                     Int       @default(0)
  comment                            String?   @db.LongText
  createdDatetime                    DateTime? @default(now()) @db.DateTime(0)
  projects                           projects  @relation(fields: [projectID], references: [projectID], onDelete: Cascade, map: "FK_projectevaluateformresponse_projects")

  @@id([studentID, projectID])
  @@index([projectID], map: "FK_projectevaluateformresponse_projects")
  @@index([studentID], map: "FK_projectevaluateformresponse_users")
}

enum projectconsiderationstatus_statusVP {
  QUEUE
  APPROVED
  REJECTED
}

enum projectcostexpandedlist_costType {
  MEDINCOME
  EXTRACIRR
  SPORTS
  OTHER
}

enum organizations_orgType {
  ROOT
  CLUB
  DIVISION
  OTHER
}

enum projectconsiderationstatus_statusFinance {
  QUEUE
  APPROVED
  REJECTED
}

enum projectconsiderationstatus_statusSec {
  QUEUE
  APPROVED
  REJECTED
}

enum useraffiliation_affiliationType {
  PRESIDENT
  VICE_PRESIDENT
  SECRETARY
  MEMBER
}

enum projectconsiderationstatus_statusPresent {
  QUEUE
  REJECTED
  PASS_IN_PRINCIPLE
  PASS
}

enum projectconsiderationstatus_projectConsiderationType {
  EARLY_BIRD
  NORMAL
}

enum usercredentials_role {
  ADMIN
  PRES
  VP
  STAFF
  USER
}

enum projectconsiderationstatus_projectType {
  OLD
  NEW
}

enum projectcertificate_certDesignType {
  PCP_TH
  PCP_EN
  STF_TH
  STF_EN
}

enum projectcertificatestatus_certPCPStatus {
  DISABLED
  NOT_READY
  REQ_NOT_MEET
  READY
}

enum projectevaluateformstatus_formStatus {
  ACTIVE
  INACTIVE
}

enum projectcertificatestatus_certSTFStatus {
  DISABLED
  NOT_READY
  REQ_NOT_MEET
  READY
}

enum projectparticipation_participationStatus {
  ABSENT
  PRESENT
}
