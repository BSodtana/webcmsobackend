generator client {
  provider = "prisma-client-js"
}

// generator erd {
//   provider = "prisma-erd-generator"
// }

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model activity_characteristics_choices {
  id   String  @id @db.VarChar(50)
  type Int?
  text String? @db.VarChar(150)
}

model organizations {
  orgID           String            @id @default("") @db.VarChar(15)
  orgName         String            @default("") @db.VarChar(100)
  orgType         String            @default("") @db.VarChar(10)
  parentOrg       String?           @default("") @db.VarChar(15)
  childrenProject projects[]
  userAffiliation userAffiliation[]
}

model project_21st_skill_items {
  skillItemID String @id @default("") @db.VarChar(50)
  skillSetID  String @default("") @db.VarChar(50)
  skillName   String @default("") @db.VarChar(100)
}

model project_21st_skill_set {
  skillSetID   String @id @db.VarChar(50)
  skillSetName String @default("0") @db.VarChar(100)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model projectParticipants {
  participantPositionID String                    @id @db.VarChar(36)
  recruitID             String                    @default("") @db.VarChar(15)
  student_id            Int                       @default(0)
  createdDateTime       DateTime?                 @default(dbgenerated("(current_timestamp())"))
  parentRecruitEntity   projectParticipantRecruit @relation(fields: [recruitID], references: [recruitID])
  studentData           users                     @relation(fields: [student_id], references: [student_id])

  @@index([recruitID], map: "recruitID")
  @@index([student_id], map: "student_id")
}

model projectParticipantRecruit {
  recruitID       String                @id @default(dbgenerated("(current_timestamp())")) @db.VarChar(15)
  projectID       String                @db.VarChar(15)
  registerFrom    DateTime              @db.DateTime(0)
  registerUntil   DateTime              @db.DateTime(0)
  maxNumber       Int                   @default(0)
  createdDateTime DateTime              @default(now())
  updatedDateTime DateTime              @default(now())
  isAllowed       Boolean               @default(false)
  projectData     projects              @relation(fields: [projectID], references: [project_id])
  member          projectParticipants[]

  @@index([projectID], map: "projectID")
}

model projectStaffRecruit {
  recruitID       String                        @id @default(dbgenerated("(current_timestamp())")) @db.VarChar(15)
  projectID       String                        @db.VarChar(15)
  registerFrom    DateTime                      @db.DateTime(0)
  registerUntil   DateTime                      @db.DateTime(0)
  createdDateTime DateTime                      @default(now()) @db.DateTime(0)
  updatedDateTime DateTime                      @default(now()) @db.DateTime(0)
  isAllowed       Boolean                       @default(false)
  positions       projectStaffRecruitPosition[]
  projectData     projects                      @relation(fields: [projectID], references: [project_id])

  @@index([projectID], map: "projectID")
}

model projectStaffRecruitPosition {
  positionID          String              @id @default(dbgenerated("(current_timestamp())")) @db.VarChar(15)
  recruitID           String              @db.VarChar(15)
  positionName        String              @db.VarChar(15)
  maxNumber           Int                 @default(0)
  registerFrom        DateTime            @db.DateTime(0)
  registerUntil       DateTime            @db.DateTime(0)
  createdDateTime     DateTime            @default(now()) @db.DateTime(0)
  updatedDateTime     DateTime            @default(now()) @db.DateTime(0)
  isAllowed           Boolean             @default(false)
  projectStaffRecruit projectStaffRecruit @relation(fields: [recruitID], references: [recruitID])
  member              projectStaffs[]

  @@index([recruitID], map: "recruitID")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model projectStaffs {
  id                  String                      @id @default(uuid()) @db.VarChar(36)
  positionID          String                      @db.VarChar(36)
  recruitID           String                      @default("") @db.VarChar(15)
  student_id          Int                         @default(0)
  createdDateTime     DateTime?
  parentRecruitEntity projectStaffRecruitPosition @relation(fields: [positionID], references: [positionID])
  studentData         users                       @relation(fields: [student_id], references: [student_id])

  @@index([recruitID], map: "recruitID")
  @@index([student_id], map: "student_id")
}

model project_year_allow {
  allowID     String  @id @default(dbgenerated("(current_timestamp())")) @db.VarChar(10)
  recruitID   String? @db.VarChar(15)
  yearAllowed Int?

  @@index([recruitID], map: "recruitID")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model projects {
  project_id                 String                      @id @unique @db.VarChar(50)
  student_id                 Int
  orgID                      String                      @db.VarChar(50)
  projectName                String?                     @db.VarChar(500)
  projectNickName            String?                     @db.VarChar(500)
  projectEngName             String?                     @db.VarChar(500)
  projectEngNickName         String?                     @db.VarChar(500)
  projectDescription         String?                     @db.VarChar(280)
  projectDetail              String?                     @db.VarChar(10000)
  eventDateStart             DateTime?
  eventDateFinish            DateTime?
  createdDateTime            DateTime?                   @default(now())
  updatedDateTime            DateTime?                   @default(now())
  projectData                projectData?
  ownerData                  users?                      @relation(fields: [student_id], references: [student_id])
  ownerOrg                   organizations               @relation(fields: [orgID], references: [orgID])
  academicYear               Int                         @default(202401)
  isShown                    Int                         @default(0)
  projectConsiderationStatus ProjectConsiderationStatus?
  participantRecruit         projectParticipantRecruit[]
  staffRecruit               projectStaffRecruit[]

  @@index([orgID], map: "orgID")
  @@index([student_id], map: "student_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model projectData {
  project_id                String    @id @db.VarChar(50)
  place_in_cmu              String    @default("") @db.MediumText
  place_outside_cmu         String?   @default("") @db.MediumText
  date_prepare_start        DateTime? @default(now()) @db.Date
  date_prepare_end          DateTime? @default(now()) @db.Date
  date_event_start          DateTime? @default(now()) @db.Date
  date_event_end            DateTime? @default(now()) @db.Date
  date_summation_start      DateTime? @default(now()) @db.Date
  date_summation_end        DateTime? @default(now()) @db.Date
  prof                      String?   @default("") @db.VarChar(100)
  prof_aff                  String?   @default("") @db.VarChar(100)
  other_org                 String?   @default("") @db.MediumText
  cmso_proj_type            String?   @default("") @db.VarChar(10)
  cmu_proj_type             String?   @default("") @db.VarChar(10)
  cmu_med_grad              String?   @default("") @db.VarChar(10)
  cmso_mission_type         String?   @default("") @db.VarChar(10)
  cmu_med_org               String?   @default("") @db.VarChar(10)
  background                String?   @default("") @db.VarChar(3000)
  aims                      String?   @default("") @db.MediumText
  participant_student       Int?      @default(0)
  participant_prof          Int?      @default(0)
  participant_student_staff Int?      @default(0)
  participant_fac_staff     Int?      @default(0)
  participant_outside       Int?      @default(0)
  goal_qualitative          String?   @default("") @db.MediumText
  indicator_participant     String?   @default("") @db.MediumText
  indicator_satisfactory    String?   @default("") @db.MediumText
  indicator_aims            String?   @default("") @db.MediumText
  output                    String?   @default("") @db.MediumText
  plan                      String?   @default("") @db.MediumText
  stageDo                   String?   @default("") @db.MediumText
  stageCheck                String?   @default("") @db.MediumText
  act                       String?   @default("") @db.MediumText
  fund_fac                  String?   @default("") @db.MediumText
  fund_extracir             String?   @default("") @db.MediumText
  fund_sport                String?   @default("") @db.MediumText
  fund_other                String?   @default("") @db.MediumText
  fund_name                 String?   @default("") @db.VarChar(200)
  createdDateTime           DateTime? @default(now())
  project                   projects? @relation(fields: [project_id], references: [project_id])
}

model userAffiliation {
  student_id      Int
  affiliatedOrg   String        @db.VarChar(50)
  affiliationType UserLevel
  createdDateTime DateTime?     @default(now())
  affiliationID   Int           @id @default(autoincrement())
  user            users         @relation(fields: [student_id], references: [student_id])
  orgData         organizations @relation(fields: [affiliatedOrg], references: [orgID])

  @@index([affiliatedOrg], map: "affiliatedOrg")
  @@index([student_id], map: "student_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model users {
  student_id        Int                   @id
  title             String                @db.VarChar(10)
  title_en          String                @db.VarChar(10)
  first_name        String?               @db.VarChar(50)
  last_name         String?               @db.VarChar(50)
  nick_name         String?               @db.VarChar(50)
  current_year      Int?
  category          String?               @db.VarChar(50)
  phone_number      String?               @db.VarChar(10)
  line_id           String?               @db.VarChar(50)
  facebook          String?               @db.VarChar(50)
  instagram         String?               @db.VarChar(50)
  medical_condition String?               @db.VarChar(100)
  allergy           String?               @db.VarChar(100)
  special_need      String?               @db.VarChar(100)
  createdDateTime   DateTime?             @default(now()) @db.DateTime(0)
  updatedDateTime   DateTime?             @default(now()) @db.DateTime(0)
  first_name_en     String?               @db.VarChar(50)
  last_name_en      String?               @db.VarChar(50)
  projects          projects[]
  userCredential    userCredentials?
  affiliation       userAffiliation[]
  participantOf     projectParticipants[]
  staffOf           projectStaffs[]

  @@unique([student_id])
  @@index([student_id, first_name], map: "student_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model userCodeVerification {
  student_id      Int       @id @default(autoincrement())
  code            String?   @db.VarChar(10)
  createdDateTime DateTime? @default(now()) @db.DateTime(0)
  referenceID     String?   @db.VarChar(10)
}

model userCredentials {
  student_id      Int             @id
  email           String?         @db.VarChar(100)
  password        String?         @db.VarChar(500)
  createdDateTime DateTime?       @default(now())
  updatedDateTime DateTime?       @updatedAt
  role            userAccessLevel @default(USER)
  emailVerified   Int?            @default(0)
  userData        users?          @relation(fields: [student_id], references: [student_id])

  @@unique([student_id])
}

model usersLogout {
  uuid           String    @id @default(uuid())
  token          String?   @db.VarChar(10000)
  killedDateTime DateTime? @default(now()) @db.DateTime(0)
}

model ProjectConsiderationStatus {
  project_id               String                   @id @unique
  statusVP                 CheckingStatus           @default(QUEUE)
  statusFinance            CheckingStatus           @default(QUEUE)
  statusSec                CheckingStatus           @default(QUEUE)
  statusPresent            ConsiderStatus           @default(QUEUE)
  comment                  String                   @default("") @db.MediumText
  updatedDTM               DateTime                 @default(now())
  projectConsiderationType ProjectConsiderationtype @default(NORMAL)
  dateApprovalDoc          DateTime?
  dateOtherDoc             DateTime?
  dateActionPlan           DateTime?
  dateReceipt              DateTime?
  dateFinalize             DateTime?
  projectType              ProjectType              @default(OLD)
  projects                 projects?                @relation(fields: [project_id], references: [project_id])
}

enum userAccessLevel {
  ADMIN
  PRES
  VP
  STAFF
  USER
}

enum UserLevel {
  PRESIDENT
  VICE_PRESIDENT
  SECRETARY
  MEMBER
}

enum CheckingStatus {
  QUEUE
  APPROVED
  REJECTED
}

enum ConsiderStatus {
  QUEUE
  REJECTED
  PASS_IN_PRINCIPLE
  PASS
}

enum ProjectConsiderationtype {
  EARLY_BIRD
  NORMAL
}

enum ProjectType {
  OLD
  NEW
}
